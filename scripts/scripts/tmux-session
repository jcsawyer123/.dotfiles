#!/usr/bin/env python3

import os
import argparse
import subprocess
import sys

def is_in_tmux():
    return "TMUX" in os.environ

def does_sessions_exists(session_name):
    check_session_cmd = f'tmux has-session -t "{session_name}"'
    return subprocess.run(check_session_cmd, shell=True, capture_output=True, text=True).returncode == 0

def get_current_session():
    get_current_session_cmd = 'tmux display-message -p "#S"'
    return subprocess.run(get_current_session_cmd, shell=True, capture_output=True, text=True).stdout.strip() or None

def list_sessions():
    get_available_sessions = f"tmux list-sessions -F '#{{session_name}}'"
    return subprocess.run(get_available_sessions, shell=True, capture_output=True, text=True).stdout.strip().split('\n') or None

def get_session_input():
    available_sessions = list_sessions()
    if(not available_sessions):
        sys.exit("No Tmux sessions found.")
    print("Available sessions:")
    for index, session in enumerate(available_sessions, 0):
        print(f"{index + 1}: {session}")

    user_input = input("Enter the session index or name to select a session: ")

    if user_input.isdigit():
        index = int(user_input)
        if 1 <= index <= len(available_sessions):
            return available_sessions[index - 1]
        else:
            sys.exit("Invalid index")
    elif user_input in available_sessions:
        return user_input
    else:
        sys.exit("Invalid session")


def create_or_attach_session(session_name):
    # Get the current session name, if any
    current_session = get_current_session()
    session_exists = does_sessions_exists(session_name)

    # Have to check "is_in_tmux" as current session will return last used session if exists
    if is_in_tmux() and current_session == session_name:
        # print(f"Already in session: {session_name}")
        return

    # if session does not exist - Create it
    if not session_exists:
        # Create or attach to the specified session
        create_session_cmd = f'tmux new-session -d -s "{session_name}"'
        subprocess.run(create_session_cmd, shell=True)

    # Already in tmux session
    if is_in_tmux():
        switch_session_cmd = f'tmux switch-client -t "{session_name}"'
        subprocess.run(switch_session_cmd, shell=True)
    else:
        # Connect to the session
        attach_session_cmd = f'tmux attach-session -t "{session_name}"'
        subprocess.run(attach_session_cmd, shell=True)

def create_or_open_window(session, window_name):
    # If the window already exists with that name will will connect to that - Prevents window name duplication where possible.
    connect_window_cmd = f'tmux new-window -Sn {window_name} -t {session}:'
    print(f"Window: {connect_window_cmd}")
    subprocess.run(connect_window_cmd, shell=True)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Connect to or create a tmux session. (Optional: Window)')
    parser.add_argument('session_name', metavar='nameOfsession', type=str, help='the name of the tmux session')
    parser.add_argument('window_name', nargs='?', type=str, help='the name of the tmux window')

    args = parser.parse_args()
    print(args.window_name)

    create_or_attach_session(args.session_name)
    
    if(args.window_name != None):
        create_or_open_window(args.session_name, args.window_name)
    
